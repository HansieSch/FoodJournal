angular.module("FoodJournalApp",["ngRoute"]),angular.module("FoodJournalApp").config(["$routeProvider",function(t){t.when("/",{templateUrl:"app/views/pages/home.html",controller:"mainCtrl"}).when("/allFoodItems",{templateUrl:"app/views/pages/fooditempages/allFoodItems.html",controller:"allFoodItemsCtrl"}).when("/singleFoodItem/:id?",{templateUrl:"app/views/pages/fooditempages/singleFoodItem.html",controller:"singleFoodItemCtrl"}).when("/createFoodItem",{templateUrl:"app/views/pages/fooditempages/createFoodItem.html",controller:"createFoodItemCtrl"}).when("/editFoodItem/:id?",{templateUrl:"app/views/pages/fooditempages/editFoodItem.html",controller:"editFoodItemCtrl"}),t.when("/allJournalEntries",{templateUrl:"app/views/pages/journalentrypages/allJournalEntries.html",controller:"allJournalEntriesCtrl"}).when("/createJournalEntry",{templateUrl:"app/views/pages/journalentrypages/createJournalEntry.html",controller:"createJournalEntryCtrl"}).when("/editJournalEntry/:id?",{templateUrl:"app/views/pages/journalentrypages/editJournalEntry.html",controller:"editJournalEntryCtrl"}).when("/singleJournalEntry/:id?",{templateUrl:"app/views/pages/journalentrypages/singleJournalEntry.html",controller:"singleJournalEntryCtrl"})}]);var foodJournalApp=angular.module("FoodJournalApp");foodJournalApp.controller("createFoodItemCtrl",["$scope","FoodItemService",function(t,e){t.status="unset",t.newItem=function(a){return a?void e.create(a).then(function(e){e.data.success?t.status=!0:(t.status=!1,console.log(e.data.error))}):(t.status=!1,null)}}]),foodJournalApp.controller("editFoodItemCtrl",["$scope","$routeParams","FoodItemService",function(t,e,a){t.status="unset",a.get(e.id).then(function(e){var a=e.data.item;t.edittedFoodItemData=a,t.edittedFoodItemData.energy=a.typical_nutritional_information.energy,t.edittedFoodItemData.protein=a.typical_nutritional_information.protein,t.edittedFoodItemData.total_carbs=a.typical_nutritional_information.carbohydrates.total,t.edittedFoodItemData.total_sugar=a.typical_nutritional_information.carbohydrates.total_sugar,t.edittedFoodItemData.total_fat=a.typical_nutritional_information.fat.total,t.edittedFoodItemData.saturated=a.typical_nutritional_information.fat.saturated,t.edittedFoodItemData.trans=a.typical_nutritional_information.fat.trans,t.edittedFoodItemData.mono_unsaturated=a.typical_nutritional_information.fat.mono_unsaturated,t.edittedFoodItemData.poly_unsaturated=a.typical_nutritional_information.fat.poly_unsaturated}),t.saveItem=function(o){a.update(e.id,o).then(function(e){return e?void(e.data.success?t.status=!0:(t.status=!1,console.log(e.data.error))):(t.status=!1,null)})}}]),foodJournalApp.controller("allFoodItemsCtrl",["$scope","FoodItemService",function(t,e){e.getAll().then(function(e){t.all=e.data.items})}]),foodJournalApp.controller("singleFoodItemCtrl",["$scope","$routeParams","FoodItemService","$location",function(t,e,a,o){t.status="unset",a.get(e.id).then(function(e){t.foodItemData=e.data.item,console.log("ID: "+t.foodItemData._id)}),t.removeItem=function(e){return e?void a.remove(e).then(function(e){e.data.success?o.path("/allFoodItems"):(t.status=!1,console.log(e.data.error))}):(t.status=!1,null)}}]);var foodJournalApp=angular.module("FoodJournalApp");foodJournalApp.controller("allJournalEntriesCtrl",["$scope","JournalEntryService",function(t,e){e.getAll().then(function(e){e.data.entries.forEach(function(t,e,a){a[e].timeCreated=new Date(t.date).getTime(),a[e].dateString=new Date(t.date).toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric"})}),t.allEntries=e.data.entries})}]),foodJournalApp.controller("singleJournalEntryCtrl",["$scope","$routeParams","JournalEntryService","$location",function(t,e,a,o){a.get(e.id).then(function(e){e.data.entry.timeCreated=new Date(e.data.entry.date).getTime(),e.data.entry.dateString=new Date(e.data.entry.date).toLocaleDateString("en-US",{weekday:"long",year:"numeric",month:"long",day:"numeric"}),t.entryData=e.data.entry}),t.removeItem=function(t){a.remove(t).then(function(t){t.data.success&&o.path("/allJournalEntries")})}}]),foodJournalApp.controller("createJournalEntryCtrl",["$scope","JournalEntryService","FoodItemService","$location",function(t,e,a,o){t.newFoodItemData={},t.newJournalEntryData={total_calories_eaten:0,food_consumed:[]},t.contained=!1,a.getCategories().then(function(e){t.categories=e.data.metadata}),t.addItem=function(e){return!!e&&void a.find({type:e.type,brand:e.brand,name:e.name}).then(function(a){var o=a.data.item,n={id:o._id,name:o.name,brand:o.brand,type:o.type,calories_per_gram:o.calories_per_gram,amount_eaten:e.grams_eaten,calories_eaten:e.grams_eaten*o.calories_per_gram};t.newJournalEntryData.food_consumed.push(),t.newJournalEntryData.food_consumed.forEach(function(a,r,l){a.id===n.id&&(a.amount_eaten+=n.amount_eaten,a.calories_eaten+=e.grams_eaten*o.calories_per_gram,t.contained=!0)}),t.contained?t.contained=!1:t.newJournalEntryData.food_consumed.push(n),t.newJournalEntryData.total_calories_eaten+=o.calories_per_gram*e.grams_eaten,t.newFoodItemData={}})},t.saveEntry=function(t){e.create(t).then(function(t){t.data.success&&o.path("/allJournalEntries")})}}]),foodJournalApp.controller("editJournalEntryCtrl",["$scope","JournalEntryService","$routeParams","FoodItemService","$location",function(t,e,a,o,n){e.get(a.id).then(function(e){t.entry=e.data.entry}),o.getCategories().then(function(e){t.categories=e.data.metadata}),t.newFoodItemData={},t.contained=!1,t.addItem=function(e){return!!e&&void o.find({type:e.type,brand:e.brand,name:e.name}).then(function(a){var o=a.data.item,n={id:o._id,name:o.name,brand:o.brand,type:o.type,calories_per_gram:o.calories_per_gram,amount_eaten:e.grams_eaten,calories_eaten:e.grams_eaten*o.calories_per_gram};t.entry.food_consumed.push(),t.entry.food_consumed.forEach(function(a,r,l){a.id===n.id&&(a.amount_eaten+=n.amount_eaten,a.calories_eaten+=e.grams_eaten*o.calories_per_gram,t.contained=!0)}),t.contained?t.contained=!1:t.entry.food_consumed.push(n),t.entry.total_calories_eaten+=o.calories_per_gram*e.grams_eaten,t.newFoodItemData={}})},t.saveEntry=function(t,a){console.log(t),console.log(a),e.update(t,a).then(function(t){t.data.success&&n.path("/allJournalEntries")})}}]),angular.module("FoodJournalApp").controller("mainCtrl",["$scope","FoodItemService",function(t,e){}]),angular.module("FoodJournalApp").factory("FoodItemService",["$http",function(t){return{getAll:function(){return t.get("/api/fooditem")},create:function(e){return t.post("/api/fooditem",e)},get:function(e){return t.get("/api/fooditem/"+e)},update:function(e,a){return t.put("/api/fooditem/"+e,a)},remove:function(e){return t.delete("/api/fooditem/"+e)},find:function(e){return t({url:"/api/find/fooditem",method:"GET",params:{name:e.name,brand:e.brand,type:e.type}})},getCategories:function(){return t.get("/api/metadata/fooditem")}}}]),angular.module("FoodJournalApp").factory("JournalEntryService",["$http",function(t){return{getAll:function(){return t.get("/journalentry")},create:function(e){return t.post("/journalentry",e)},get:function(e){return t.get("/journalentry/"+e)},update:function(e,a){return t.put("/journalentry/"+e,a)},remove:function(e){return t.delete("/journalentry/"+e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
